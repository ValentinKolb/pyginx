#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess

# remote dependencies
import validators
from jinja2 import FileSystemLoader, Environment

# creating parser for config file
from configparser import ConfigParser, ExtendedInterpolation
config_file_parser = ConfigParser(interpolation=ExtendedInterpolation())

VERSION = '1.7'


def domain(d: str) -> str:
    """
    validates a string to be a domain name or an IPv4 oder IPv6

    Parameters
    ----------
    d : str
        the string to be validated

     Raises
    ------
    argparse.ArgumentTypeError
        will be raised if the validation fails


    Returns
    -------
    bool :
        the domain
    """
    if any([d == 'localhost',
            validators.domain(d),
            validators.ipv4(d),
            validators.ipv6(d)]):
        return d
    raise argparse.ArgumentTypeError(f'{d}: must be a valid dns name, IPv4 or IPv6')


def port(p: str) -> str:
    """
    checks if an string is a network port

    Parameters
    ----------
    p : str
        will be check

     Raises
    ------
    argparse.ArgumentTypeError
        will be raised if the validation fails

    Returns
    -------
    str :
        the port if it is a positive integer between 1 and 65535, False otherwise
    """
    if p.isnumeric() and 1 <= int(p) <= 65535:
        return p
    raise argparse.ArgumentTypeError(f'{p}: must be a positive integer between 1 and 65535')


def upstream(u: str):
    """
    validates a upstream

    Parameters
    ----------
    u : str
        will be validated

    Raises
    ------
    argparse.ArgumentTypeError
        will be raised if the validation fails

    Returns
    -------
    str :
        the validated upstream will be returned
    """
    d, p = u.split(":", 1)
    domain(d)
    port(p)
    return u


if not os.geteuid() == 0:
    print("You must run this script as root", file=sys.stderr)
    exit(1)

# create the top-level parser
argument_parser = argparse.ArgumentParser(
    prog='pyginx',
    description='Python script to automate nginx virtual server and stream deployment.'
)
argument_parser.add_argument('--version', action='version', version=f'%(prog)s {VERSION}')
argument_parser.add_argument('--config-file', metavar="", type=str, default="/etc/pyginx.d/pyginx.ini",
                             help="The path of the pyginx config file.")

subparsers = argument_parser.add_subparsers(help="run 'pyginx <command> -h' for more info", required=True, dest="usage")

# create the parser for the "http" command
http_parser = subparsers.add_parser('http', help='Run this command to create a new '
                                                 'config file for an http virtual server')

# required http arguments
http_parser_required = http_parser.add_argument_group("required")
http_parser_required.add_argument('-d', '--domain',
                                  metavar="",
                                  type=domain,
                                  help='The domain under which the service is reachable.'
                                       ' This must be a fully qualified domain name. (e.g. example.com)',
                                  required=True)
http_parser_required.add_argument('--upstreams', '-u',
                                  metavar="",
                                  nargs="+",
                                  type=upstream,
                                  help='The upstream and port where the connection is forwarded to. '
                                       'Separate multiple upstreams by spaces. '
                                       'Format: <domain/ip>:<port>',
                                  required=True)

# optional http arguments
http_parser.add_argument("--no-ssl",
                         action="store_true",
                         default=False,
                         help="Disable SSL: prevent to automatically run certbot "
                              "to request a ssl certificate and enable https")

# create the parser for the "stream" command
stream_parser = subparsers.add_parser('stream', help='Created a new config file for a '
                                                     'tcp stream (i.e port-forwarding). '
                                                     'For this the port on this server must '
                                                     'be exposed by the firewall')
# required stream arguments
stream_parser_required = stream_parser.add_argument_group("required")
stream_parser_required.add_argument('--upstreams', '-u',
                                    metavar="",
                                    nargs="+",
                                    type=upstream,
                                    help='The upstream and port where the connection is forwarded to. '
                                         'Separate multiple upstreams by spaces. '
                                         'Format: <domain/ip>:<port>',
                                    required=True)
stream_parser_required.add_argument('--port', '-p',
                                    metavar="",
                                    type=port,
                                    help='The port that to be forwarded.',
                                    required=True)

# parse command line arguments
args = argument_parser.parse_args()
print(args)

# parse the config file
config_file_parser.read(args.config_file)
config_template_dir: str = str(config_file_parser["templates"]["template-dir"])
config_http_template: str = str(config_file_parser["templates"]["http-template"])
config_stream_template: str = str(config_file_parser["templates"]["stream-template"])
config_nginx_http_dir: str = str(config_file_parser["nginx"]["http-config-dir"])
config_nginx_stream_dir: str = str(config_file_parser["nginx"]["stream-config-dir"])

print()

# set up templating engine environment
jinja_env = Environment(loader=FileSystemLoader(config_template_dir),
                        lstrip_blocks=True,
                        trim_blocks=True)

# initialise variables
filename = rendered_template = path = ""

if args.usage == "http":
    print(f'Creating config for: '
          f'{"http://" if args.no_ssl else "https://"}{args.domain} -> ( {" | ".join(args.upstreams)} )')

    filename = f"{args.domain}.conf"
    path = f"{config_nginx_http_dir}/{filename}"
    rendered_template = jinja_env.get_template(config_http_template).render(
        domain=args.domain,
        upstreams=args.upstreams
    )

elif args.usage == "stream":
    print(f'Creating config for: '
          f'0.0.0.0:{args.port} -> ( {" | ".join(args.upstreams)} )')

    filename = f"{args.port}.conf"
    path = f"{config_nginx_stream_dir}/{filename}"
    rendered_template = jinja_env.get_template(config_stream_template).render(
        port=args.port,
        upstreams=args.upstreams
    )
else:
    exit(-1)

if os.path.isfile(path):
    if not "y" == input(
            f"The file {filename} already exists,"
            f" do you want to override it? [y/n] : ").strip().lower():
        exit(2)

# write to config file
print(f"Saving config file to {path!r}")
with open(path, "w+") as file:
    file.write(rendered_template)

# run certbot accordingly
if args.usage == "http" and not args.no_ssl:
    return_code = subprocess.call(["sudo", "certbot", "--nginx", "-d", args.domain])
    if return_code != 0:
        exit(return_code)

print("The config file was generated.")
print("The file will be automatically opened in 'nano' for further adjustments.")
input("Press ENTER to continue.")

subprocess.call(["sudo", "nano", path])
if 0 != subprocess.call(["sudo", "nginx", "-t"]):
    print(f"The config file contains invalid syntax. Location of the file : {path}", file=sys.stderr)
    print("To reload nginx after the fix run 'sudo systemctl reload nginx'")
    exit(3)

subprocess.call(["sudo", "systemctl", "reload", "nginx"])
print("Configuration successfully deployed!")
print(f"Config file: {path}")
